@page
@model LoginModel

@{
    ViewData["Title"] = "Log in";
    string cookieToken, formToken;
    var cookiesAntiforgery = Request.Cookies.Where(x => x.Key.Contains("AspNetCore.Antiforgery"))
    .Select(x=> new{ key = x.Key, value =x.Value}).ToList() ;
}

<h1>@ViewData["Title"]</h1>
<div class="row">
    <div class="col-md-4">
        <section>
            <form id="none" method="post">
                <h2>Use a local account to log in.</h2>
                <hr />
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-floating">
                    <input asp-for="Input.Email" class="form-control" autocomplete="username" aria-required="true" />
                    <label asp-for="Input.Email" class="form-label"></label>
                    <span asp-validation-for="Input.Email" class="text-danger"></span>
                </div>
                <div class="form-floating">
                    <input asp-for="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" />
                    <label asp-for="Input.Password" class="form-label"></label>
                    <span asp-validation-for="Input.Password" class="text-danger"></span>
                </div>
                <div>
                    <div class="checkbox">
                        <label asp-for="Input.RememberMe" class="form-label">
                            <input onclick="changeValueCheckRememberMe(event)" class=" form-check-input" asp-for="Input.RememberMe" value="true">
                            @Html.DisplayNameFor(m => m.Input.RememberMe)
                        </label>
                    </div>
                </div>
                <div>
                    <button id="login-submit" type="button" class="w-100 btn btn-lg btn-primary" onclick="loginUser()">Log in</button>
                </div>
                <div>
                    <p>
                        <a id="forgot-password" asp-page="./ForgotPassword">Forgot your password?</a>
                    </p>
                    <p>
                        <a asp-page="./Register" asp-route-returnUrl="@Model.ReturnUrl">Register as a new user</a>
                    </p>
                    <p>
                        <a id="resend-confirmation" asp-page="./ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            </form>
        </section>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to log in.</h3>
            <hr />
            @{
                if ((Model.ExternalLogins?.Count ?? 0) == 0)
                {
                    <div>
                        <p>
                            There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715">article
                            about setting up this ASP.NET application to support logging in via external services</a>.
                        </p>
                    </div>
                }
                else
                {
                    <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="form-horizontal">
                        <div>
                            <p>
                                @foreach (var provider in Model.ExternalLogins)
                                {
                                    <button type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
                                }
                            </p>
                        </div>
                    </form>
                }
            }
        </section>
    </div>
</div>

@section Scripts {

    <script>
        var rememberMeCheck;
        async function changeValueCheckRememberMe(e){
            if (rememberMeCheck==null){
                rememberMeCheck = e.target.value;
            }
            else
            {
                rememberMeCheck = !rememberMeCheck;
            }
            document.getElementById(e.target.id).value=rememberMeCheck;
            
        }
        async function  loginUser(){
            let tokenHTMLElement = '@Html.AntiForgeryToken()';
            let begin = tokenHTMLElement.indexOf('value="', 1)+7;
            let end = tokenHTMLElement.indexOf('" />', 1);
            let antiforgeryToken =tokenHTMLElement.substr(begin, end - begin);
       
          
           let datos={
               'Email':document.getElementById('Input_Email').value,
               'Password': document.getElementById('Input_Password').value,
               'RememberMe': !document.getElementById('Input_RememberMe').value
           }
            
           let response;
            try
            {
                console.log( document.getElementsByName('__RequestVerificationToken').value)
                let url ='/Identity/Account/Redirect?returnUrl=/identity/account/logout';
                  response = await fetch(url, {
                       method: 'POST', // *GET, POST, PUT, DELETE, etc.
                        headers: {
                            'Content-Type': 'application/json',
                        'RequestVerificationToken': antiforgeryToken
                        },
                        redirect: 'follow', // manual, *follow, error
                        referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
                        body: JSON.stringify(datos) // body data type must match "Content-Type" header
                      });

               let json =await response.json();
                if (json.statusCode!=200){
                    alert(json.message)
                    return;
                }
                console.log(json.tokenBase64)
                if (json.tokenBase64!=undefined)
                window.localStorage.setItem('accessToken.js', json.tokenBase64);

                
                window.localStorage.setItem('tokenData.js', JSON.stringify(json.data));
                console.log('redirect '+ json.redirect)
                window.location.href = json.redirect;
                //let response =  fetch(, {
                //method: "post",
                //body: JSON.stringify(datos),
                //headers: { "content-type": "application/json" }
                //})
                //.then(response => response.json())
                //    .then(json => console.log(json))
                //    .catch (err => console.log(err));
            }catch(e)
            {
                console.log(e)
                console.log(response)
            }
            
        }
    </script>
    <partial name="_ValidationScriptsPartial" />
}
