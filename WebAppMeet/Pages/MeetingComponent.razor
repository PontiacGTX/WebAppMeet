@page "/Meeting/{MeetingId:int}"
@using Microsoft.AspNetCore.SignalR.Client;
@using WebAppMeet.Components.Helper;
@using Newtonsoft.Json;
@using WebAppMeet.Data.Models;
@inherits MeetingComponentBase;
@inject IHttpContextAccessor  httpContextAccesor;

<ChatRoomComponent MeetingId="MeetingId" @ref=ChatRoom >

</ChatRoomComponent>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _module = await JS.InvokeAsync<IJSObjectReference>(
                "import", "./js/InterOpLib.js");
            }
            catch (Exception)
            {

            }

            var token = await base.TryGetToken();
            _AuthenticationState = await _state.GetAuthenticationStateAsync("jwt", token);
            var user = _AuthenticationState.User?.Identity?.Name;
            ChatRoom.User = this.User = _userManager.Users.FirstOrDefault(x => x.Email.Contains(user));



            if (hub is null)
                hub = new HubConnectionBuilder()
                    .WithUrl($"https://localhost:7044/ConnectionsHub?access_token={token}"/*_NavigationManager.ToAbsoluteUri($"/ConnectionsHub?access_token={token}")*/, options =>
                    {
                        options.AccessTokenProvider = () => Task.FromResult(token);
                        options.UseDefaultCredentials = false;
                        //options.Credentials =
                        options.Credentials = System.Net.CredentialCache.DefaultCredentials;
                        options.Headers.Add("Authorization", $"Bearer {token}");
                    })
                .WithAutomaticReconnect()
                    .Build();
            HubOnReceiveMessageDelegate = ChatRoom.OnReceiveMessage;
            hub.On<string, string>("ReceiveMessage", (name, message) => {

                ChatRoom.OnReceiveMessage(name, message); });
            // hub.On<string, string>("ReceiveMessage", ChatRoom.HubOnReceiveMessageDelegate);
            var containsCookies = this.httpContextAccesor.HttpContext.Request.Cookies;
            var cookie = containsCookies["Application.Identity"];
            ChatRoom.hub = hub;
            //hub.ServerTimeout = TimeSpan.FromMilliseconds(100000);
            await hub.StartAsync();
        }
    }

}
