@page "/Meeting/{MeetingId:int}"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net
@inherits MeetingComponentBase


<h3>Meeting Component</h3>





<ChatBoxComponent @ref=ChatBox OnSendMessage="SendMessage" >

</ChatBoxComponent>


@code {

      protected override async Task OnInitializedAsync()
        {
            _state = await _AuthenticationStateProv.GetAuthenticationStateAsync();

            Cookie returnedCookie=null;
            
            if (hub is null)
                hub = new HubConnectionBuilder()
                    .WithUrl(_NavigationManager.ToAbsoluteUri("/ConnectionsHub"), options => {
                        var container = new CookieContainer();
                        container.Add(returnedCookie);
                        options.Cookies = container;
                    })
                    .Build();

            var meetingResponse = await _meetingServices.GetBy(x => x.MeetingId == this.MeetingId);
            var meeting = meetingResponse.Data as Meeting;
            int meetingId = meeting.MeetingId;

            var userMeetingResponse = await _meetingServices.GetUserMeeting(MeetingId);

            Func<Task> task = (userMeetingResponse.StatusCode switch
            {

                200 => async () =>
                {
                    _UserMeetings = userMeetingResponse.Data as IList<UserMeetings>;

                    await Task.CompletedTask;
                }
                ,
                404 => async () =>
                {
                    await PrintMessage(userMeetingResponse.Message, "No Invitees were found,please add new invitees to the meeting");

                    await Task.CompletedTask;
                }
                ,
                _ => async () =>
                {
                    await PrintMessage(userMeetingResponse.Message, "An unexpected error happened");
                    await Task.CompletedTask;
                }
                ,

            });

            await task.Invoke();

            if (userMeetingResponse.StatusCode != 200)
                return;
            HubOnReceiveMessageDelegate = OnReceiveMessage;
            hub.On<string, string>($"ReceiveMessage", HubOnReceiveMessageDelegate);
            hub.ServerTimeout = TimeSpan.FromMilliseconds(100000);
            await hub.StartAsync();
        }
}
