@*<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">WebAppMeet</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>*@
@using WebAppMeet.Components.Helper
@using Microsoft.AspNetCore.Components.Authorization;
@inject AuthenticationStateProvider auth
@inject LocalStorage _localDataStorage 
@inject UserManager<AppUser> _userManager
@inject CustomAuthenticationStateProvider _AuthenticationStateProv 
@inject NavigationManager _NavManager 
@code{
    string path = null;
    [CascadingParameter]
    protected AppUser User{ get; set; }
    protected override async Task OnInitializedAsync()
    {
        authenticationState = await auth.GetAuthenticationStateAsync();
        path = $"/ChatList";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
        if (firstRender)
        {
            
            var token = await _localDataStorage.GetTokenAsync();
            authenticationState = await _AuthenticationStateProv.GetAuthenticationStateAsync("jwt", token);
            path = $"/ChatList/{(User?.Id??"0")}";
        }
    }

 
    protected async Task RedirectToUrl()
    {
        
        var token =await  _localDataStorage.GetTokenAsync();
        authenticationState = await _AuthenticationStateProv.GetAuthenticationStateAsync("jwt",token);
        string user = authenticationState?.User?.Identity?.Name;
        User = ( _userManager.Users.FirstOrDefault(x => x.Email == user));
        _NavManager.NavigateTo($"/ChatList/{(User?.Id??"0")}");
    }
}
 <nav class="nav-prop">
            
           <ul id="ulist">
               <label class="logo"><a  href="/"> Meet </a></label>
               <li id="ullink"> <a class="active" href="/"> Home </a> </li>
               <li id="ullink"> <a href="#">About  </a> </li>
               <li id="ullink">  <a  @onclick="RedirectToUrl"> Meetings </a> </li>
               <li id="ullink"> <a href="#">Contact  </a> </li>
               <li id="icon"    @onmouseover="MakeMenuVisible"  >
                   <i class="fas fa-bars"></i>
                   <ul id="accountMenu" style="@displaymenu"  @onmouseout="MakeMenuInvisible" >
                       <CascadingAuthenticationState>
                           <AuthorizeView>
                               <Authorized>
                                   <li class="listItemLogin"><NavLink href="/Profile">Profile</NavLink></li> 
                                   <li class="listItemLogin io io-lock-locked"><NavLink href="#">Logout</NavLink></li> 
                               </Authorized>
                     
                              <NotAuthorized>
                            <li class="listItemLogin io io-lock-locked">
                                <NavLink @onclick="(e)=>RedirectLogin(e)" href="@urlLi1LinkPath">@actionText</NavLink>
                            </li>
                            <li class="listItemLogin"><NavLink id="logoutLink" @onclick="(e)=> RedirectRegistration(e)" href="@urlL2LinkPath">@actionText1</NavLink></li>
                        </NotAuthorized>
                          </AuthorizeView>
                      </CascadingAuthenticationState>
                   </ul>
               </li>
            </ul>
</nav>

@*<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
            </NavLink>
        </div>
    </nav>
</div>*@

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private string displaymenu { get; set; } = "display:none;";
    private void ToggleNavMenu() => collapseNavMenu = !collapseNavMenu;
    private bool isMouseOutMenu = true;
    string urlLi1LinkPath { get; set; } = "/Identity/Account/Login";
    string urlL2LinkPath { get; set; } = "/Identity/Account/Register";
    string actionText { get; set; } = "Login";
    string actionText1 { get; set; } = "Register";

    [CascadingParameter]
    AuthenticationState authenticationState { get; set; }
    private async void MakeMenuVisible(MouseEventArgs e)
    {
        displaymenu = "display:flex;";
        isMouseOutMenu = false;

        var token = await _localDataStorage.GetTokenAsync();
        if (!string.IsNullOrEmpty(token))
        {
            authenticationState = await _AuthenticationStateProv.GetAuthenticationStateAsync("jwt", token);
            var name = authenticationState?.User?.Identity?.Name;

            if(User==null)
                User = _userManager.Users.FirstOrDefault(x => x.Email == name);

            urlLi1LinkPath = User == null ?  "/Identity/Account/Login" : $"/ChatList/{(User?.Id ?? "0")}";
            actionText = User == null ? "Login" : "Chat list";

            urlL2LinkPath = User == null ? "/Identity/Account/Register" : "Identity/Account/Logout"; 
            actionText1 = User == null ? "Register" : "Logout";
        }

    }
    private void MakeMenuInvisible(MouseEventArgs e)
    {
        displaymenu = "display:none";
        isMouseOutMenu = true;
    }

    private void MakeMenuNonVisible(MouseEventArgs e)
    {
        displaymenu = "display:none;";
        isMouseOutMenu = true;

    }
    private void RedirectRegistration(MouseEventArgs e)
    {
        
        displaymenu = "display:none";
        isMouseOutMenu = true;
        _NavManager.NavigateTo("/Identity/Account/Register");
    }
    private void RedirectLogin(MouseEventArgs e)
    {
        displaymenu = "display:none";
        isMouseOutMenu = true;
        _NavManager.NavigateTo("Identity/Account/Login");

    }
}
